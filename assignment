<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Delivery Date Estimation</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        h1 {
            text-align: center;
            color: #4CAF50;
        }
        h2 {
            text-align: center;
            color: #555;
        }
        label {
            font-weight: bold;
            margin-top: 20px;
            display: block;
        }
        select, input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s ease;
            display: block;
            margin: 20px auto;
        }
        button:hover {
            background-color: #45a049;
        }
        #deliveryEstimate {
            text-align: center;
            font-size: 20px;
            margin-top: 20px;
            color: #d9534f;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
</head>
<body>
    <h1>Product Delivery Date Estimation</h1>
    
    <!-- Product Selection -->
    <label for="productSelect">Select Product:</label>
    <select id="productSelect">
        <option value="Product 1">Product 1</option>
        <option value="Product 2">Product 2</option>
        <option value="Product 3">Product 3</option>
    </select>

    <!-- Pincode Input -->
    <label for="pincodeInput">Enter Pincode:</label>
    <input type="text" id="pincodeInput" placeholder="Enter your pincode">

    <button id="estimateButton">Estimate Delivery Date</button>

    <h2 id="deliveryEstimate"></h2>
    
    <script>
        const excelUrl = 'https://drive.google.com/uc?export=download&id=YOUR_FILE_ID'; // Replace with your actual file ID
        const pincodeData = {}; // To store pincode-provider mapping

        function loadPincodesFromExcel() {
            fetch(excelUrl)
                .then(response => response.arrayBuffer())
                .then(data => {
                    const workbook = XLSX.read(data, { type: 'array' });
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    const rows = XLSX.utils.sheet_to_json(worksheet);

                    rows.forEach((row) => {
                        const pincode = row['Pincode'];
                        const provider = row['Provider'];
                        pincodeData[pincode] = provider;
                    });
                })
                .catch(error => console.error("Error loading Excel file:", error));
        }

        function estimateDeliveryDate(product, pincode) {
            const provider = pincodeData[pincode];
            const now = new Date();
            let deliveryDate;

            if (provider === 'Provider A') {
                const cutoffTime = new Date();
                cutoffTime.setHours(17, 0, 0); // 5 PM cutoff
                if (now < cutoffTime) {
                    deliveryDate = now;
                } else {
                    deliveryDate = new Date(now);
                    deliveryDate.setDate(now.getDate() + 1); 
                }
            } else if (provider === 'Provider B') {
                const cutoffTime = new Date();
                cutoffTime.setHours(9, 0, 0); // 9 AM cutoff
                if (now < cutoffTime) {
                    deliveryDate = now;
                } else {
                    deliveryDate = new Date(now);
                    deliveryDate.setDate(now.getDate() + 1); 
                }
            } else if (provider === 'General Partners') {
                deliveryDate = new Date(now);
                deliveryDate.setDate(now.getDate() + Math.floor(Math.random() * (5 - 2 + 1)) + 2); // 2-5 days
            } else {
                deliveryDate = 'Invalid Pincode or Provider';
            }

            return deliveryDate.toLocaleDateString();
        }

        document.getElementById('estimateButton').addEventListener('click', () => {
            const product = document.getElementById('productSelect').value;
            const pincode = document.getElementById('pincodeInput').value;
            const estimatedDate = estimateDeliveryDate(product, pincode);
            document.getElementById('deliveryEstimate').innerText = `Estimated Delivery Date: ${estimatedDate}`;
        });

        // Load pincodes from Excel when the page loads
        window.onload = loadPincodesFromExcel;
    </script>
</body>
</html>
